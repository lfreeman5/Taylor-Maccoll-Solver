import os, sys
# from matplotlib import pyplot as plt
import numpy as np
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
import solver

#Go through a range of machs  gammas
#Calculate the analytical C_p vs the one with polynomials
machs = [2.0, 2.5, 3.0, 4.0, 6.0, 8.0, 12.0, 25.0]
gammas = [1.1, 1.2, 1.3, 1.4]

coefficients = [0.8084082757517121, 46.00326192361368, -106.73890105957965, 
        95.11193136988308, -41.036511984278036, 10.2636150755039, 
        -0.37685896705755073, 0.002697840220534786, 0.9349436190906635, 
        13.998583982209317, -36.37096380754742, 35.73922076403737, 
        -17.132809709917144, 5.631705862205889, -0.0962296502362727, 
        0.0018398168859229875, 1.0138632472814955, 6.083079571141368, 
        -16.649594831791717, 16.891674313283776, -8.556526975413398, 
        3.7816276926950634, 0.013933215878602221, 0.0012230416957994949, 
        1.1076976508228784, 2.824885181985828, -8.097188836108648, 
        8.277692555095594, -4.442068542749663, 2.8829481185344163, 
        0.035676836773434834, 0.0014582787626133127, 1.1804296391751827, 
        0.8786708257075913, -2.3734341913050088, 1.8900688945631006, 
        -1.137364903823488, 2.142264231898969, 0.05204690872469395, 
        0.0009068298884561559, 1.2087434716638235, 0.5359596879870991, 
        -1.3457486555218647, 0.7431168847302911, -0.5770279313700366, 
        2.0515393130100468, 0.03613176917542852, 0.000875409944375941, 
        1.230618497499222, 0.3860237817830544, -0.920641534656127, 
        0.3219491982950706, -0.4329202546118196, 2.0710111557272164, 
        0.013042017323629767, 0.0008695935143590212, 1.2425965208677279, 
        0.3209986868253529, -0.759265266877822, 0.21097260009989247, 
        -0.45231976034024596, 2.1207428288370087, -0.005556948746883302, 
        0.0005643146086115855, 0.7707513366828469, 65.52652277171967, 
        -145.38437486473237, 124.00630051082409, -51.055864488540514, 
        11.87831244619065, -0.4728670878136744, 0.003098627904976447, 
        0.8842507823356359, 22.844969673703083, -56.40030246948704, 
        52.84859896750157, -23.910642091707782, 6.889267978360263, 
        -0.18314749293457602, 0.0024205111918040307, 0.953366596837185, 
        11.194809719305779, -29.06178976410178, 28.24596675116177, 
        -13.366470280278124, 4.741688668371988, -0.057516001778804546, 
        0.0018645323613205287, 1.0289328134130744, 4.672264929638182, 
        -12.545044513774627, 12.220643387300004, -6.002260098324609, 
        3.174150859833934, 0.01809420331276691, 0.0014784306614991172, 
        1.0916576785219965, 2.5915194037048335, -7.070169107636638, 
        6.728534358946744, -3.4501281018109338, 2.6794272491421136, 
        0.00486703279142066, 0.0018997037596362697, 1.113692180946604, 
        1.8404225715630051, -4.977518716871889, 4.543835339899654, 
        -2.426599735392788, 2.494723843986819, -0.0036433863074499433, 
        0.0018236237901372015, 1.1295356177525049, 1.426443315467728, 
        -3.836612419664478, 3.3905232964169043, -1.9329546689599575, 
        2.434938870307694, -0.018909038120155867, 0.001648940183685624, 
        1.135950895494536, 1.0855126876180052, -2.868890458725888, 
        2.3857682111403684, -1.485103195243764, 2.3672065956898045, 
        -0.02463180770930149, 0.0009675761017106072, 0.7380304406668542, 
        87.39472077128192, -186.0811083333991, 152.4671303820044, 
        -60.20504663534033, 13.22731538424246, -0.5444066464163403, 
        0.0033418339018948394, 0.8413587553321953, 33.47069428894943, 
        -78.87369436742847, 70.70911506597503, -30.450185226606667, 
        8.001015347789982, -0.25240626626423407, 0.002785794230685517, 
        0.9030946135434875, 17.658404021213766, -43.634606458428614, 
        40.57592331481073, -18.166899431214354, 5.614894296676543, 
        -0.11574742654623243, 0.002259250672254603, 0.9692947067615624, 
        8.189415518660319, -20.94796547004891, 19.74017654230826, 
        -9.093656462775218, 3.7761014754051483, -0.024859248019522124, 
        0.0019204761828303396, 1.022299510280962, 4.984283672328188, 
        -13.021569057586747, 12.258361029548473, -5.810218064100057, 
        3.1634901451495208, -0.03173499403247927, 0.0024931037900244647, 
        1.0403728451407217, 3.665139243367671, -9.54876860634443, 
        8.821508177471676, -4.267062015005263, 2.8813330299643356, 
        -0.03326871662638842, 0.00238483962487741, 1.0525479524017232, 
        2.822429987865911, -7.316708600650987, 6.624725250179701, 
        -3.311116889704303, 2.72608403329795, -0.04031061670259272, 
        0.002066091089905122, 1.0549316545504173, 1.9870474413334402, 
        -5.029292782253612, 4.299859934591751, -2.2509318828586, 
        2.5254661319004468, -0.0339675633760806, 0.001113054915271797, 
        0.7100106434572364, 130.16978087120748, -268.0246676508215, 
        212.3045476431449, -80.7837214018913, 16.561671710881644, 
        -0.749569199802957, 0.004320204159303656, 0.8043924758245812, 
        45.396841992962926, -102.48950038774247, 88.18384760264208, 
        -36.34870746904824, 8.91298825090653, -0.30253328232377047, 
        0.002968613324527938, 0.8603850534184792, 25.122452746186987, 
        -59.3079960846364, 52.86050393904555, -22.55513488729275, 
        6.338695816054071, -0.15823911029530294, 0.00244522490185627, 
        0.919480365153435, 12.35842491422369, -30.141316624460206, 
        27.287390051979752, -11.908351132713628, 4.267625457424169, 
        -0.055135016377790946, 0.002110215608014026, 0.9657343246297798, 
        7.767906568848845, -19.317918828925798, 17.531012581410526, 
        -7.804698298239298, 3.5215717511116047, -0.05391778320621105, 
        0.002706146444163136, 0.9808707529626393, 5.726017518431423, 
        -14.19229984960545, 12.685240658530537, -5.713786153549442, 
        3.1436542179610907, -0.04905265841432015, 0.0025579070656170265, 
        0.9901735592510532, 4.299264537571169, -10.570097864316027, 
        9.252985907377607, -4.2541289308767825, 2.8943565866191476, 
        -0.04896675121497986, 0.0021375850433588443, 1.0011770829775948, 
        4.881127746521074, -12.220413488188303, 10.987500222656926, 
        -5.111887358045586, 3.106734440581624, -0.07730513385705924, 
        0.001975139481961174]
coefficients = np.array(coefficients).reshape(((4,8,8)))

def get_value(gamma, mach, theta):
    if mach>=machs[-1]:
        m_idx=len(machs)-2
        m_weight = 1
    elif mach<=machs[0]:
        m_idx = 0
        m_weight = 0
    else:
        m_idx = np.searchsorted(machs, mach, side='right') - 1
        m_weight = (mach - machs[m_idx]) / (machs[m_idx + 1] - machs[m_idx]) if m_idx < len(machs) - 1 else 1.0
        if m_weight < 0:
            raise ValueError("Error: Mach weight is less than zero")

    if gamma>=gammas[-1]:
        g_idx = len(gammas) - 2
        g_weight = 1
    elif gamma<=gammas[0]:
        g_idx = 0
        g_weight = 0
    else:
        g_idx = np.searchsorted(gammas, gamma, side='right') - 1
        g_weight = (gamma - gammas[g_idx]) / (gammas[g_idx + 1] - gammas[g_idx]) if g_idx < len(gammas) - 1 else 1.0
        if g_weight < 0:
            raise ValueError("Error: Gamma weight is less than zero")
        
    glo_mlo = coefficients[g_idx][m_idx]
    glo_mhi = coefficients[g_idx][m_idx+1]
    ghi_mlo = coefficients[g_idx+1][m_idx]
    ghi_mhi = coefficients[g_idx+1][m_idx+1]

    if (glo_mlo[0] < theta or glo_mhi[0]< theta or ghi_mlo[0] < theta or ghi_mhi[0] < theta):
        return -1
        #theta is too much
    else:
        cp = m_weight*g_weight*evaluate_polynomial(ghi_mhi[1:], theta) + \
            (1-m_weight)*(1-g_weight)*evaluate_polynomial(glo_mlo[1:], theta) + \
            (1-m_weight)*(g_weight)*evaluate_polynomial(ghi_mlo[1:], theta) + \
            (m_weight)*(1-g_weight)*evaluate_polynomial(glo_mhi[1:], theta)
        return cp

def evaluate_polynomial(coefficients, x):
    answer = 0
    for i, coeffient in enumerate(coefficients):
        answer += coeffient * x**(len(coefficients)-1-i)
    return answer

if __name__ == '__main__':
    mach_range = np.linspace(2, 25, 15)
    theta_range = np.linspace(0.0, 1.4, 15)
    gamma_range = np.linspace(1.1, 1.4, 5)
    largest_error = -1
    results = []
    for g in gamma_range:
        for m in mach_range:
            for theta in theta_range:
                poly_val = get_value(g, m, theta)
                if poly_val == -1:
                    # print("Error: theta is too large")
                    continue
                else:
                    solver_beta, solver_msurf = solver.findShockParameters(theta, m, g)
                    solver_val = solver.tangent_cone_pressure_coefficient(m, solver_msurf, solver_beta, g)
                    # error = 100 * abs(poly_val - solver_val) / solver_val
                    error = poly_val - solver_val
                    print(f"Error for gamma {g}, mach {m}, theta {theta}: {error}")
                    results.append([error, g, m, theta, solver_val])
    results = sorted(results, key=lambda x: abs(x[0]), reverse=True)
    for i in range(min(250, len(results))):
        print(f'For gamma = {results[i][1]}, M{results[i][2]}, theta = {np.degrees(results[i][3])} degrees the error between TM/Poly is {results[i][0]} vs the TM value of {results[i][4]}')    
